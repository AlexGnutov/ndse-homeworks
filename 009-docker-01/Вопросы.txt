Вопросы по ДЗ 009-01 - можно их рассмотреть на лекции сегодня:

1) если я запускаю любое из:
docker run --rm -it -e name=alexey -e surname=gnutov --name mynode node:15.14
docker run -it -e name=alexey -e surname=gnutov --name mynode -v c:\src:/usr/src/app -w /usr/src/app node:15.14 

то сразу попадаю в среду Node и уже нахожусь в ней:
PS C:\src> docker run -it -e name=alexey -e surname=gnutov --name mynode -v c:\src:/usr/src/app -w /usr/src/app node:15.14     
Welcome to Node.js v15.14.0.
Type ".help" for more information.
>
- когда я выхожу из среды с помощью CTRL-C(дважды, или .exit), контейнер останавливается, почему? почему бы ОС контейнера не работать дальше?
- почему при перезапуске контейнера в среду я уже не попадаю? при этом контейнер работает, пока я его не остановлю. это разные режимы запуска. 

2) попытки запуска в фоне вот в таком варианте:
PS C:\src> docker run -d --name second_node -v c:\src\data:/var/second/data node:15.14
приводят к ситуации "слишком шустрого контейнера" он молниеносно включается и сразу выключается. Попытки его перезапустить ничего не дают, он также молниеносно "делает своё дело" и останавливается.
Добавление -t делает ситуацию нормальной. Контейнеры запускаются и всё работает хорошо. 
- поясните, пожалуйста, значение этой опции
- -d - фоновая работа - что всё-таки это для нас означает? мы же к нему всё равно можем добраться, а он всё равно отдаёт результаты выполнения команд в консоль (этот тег работает как противовес -i / -t или нет?)

3) когда мы выполняем команду вот такого вида (вопрос, вероятно, туповатый):
docker run -it -e name=alexey -e surname=gnutov --name mynode -v c:\src:/usr/src/app -w /usr/src/app node:15.14 
- где выполняется/применяется -v c:\src:/usr/src/app внутри Докера? Именно поэтому первый путь мы пишем в нашей текущей (внешней) ОС, а второй путь пишем уже во внутренней системе контейнера? 
- -w /usr/src/app - эта команда устанавливает рабочую директорию в ОС контенера, когда нужно, а когда не нужно её пользоватся

4) если пытаться в третьей задаче делать вот так:
PS C:\src> docker exec second_node cd/var/second/data
будет выведено:
OCI runtime exec failed: exec failed: container_linux.go:380: starting container process caused: exec: "cd/var/first/data": stat cd/var/first/data: no such file or directory: unknown

я для себя понял, что cd - это не вполне команда в данном случае, а средство навигации. Так как она ничего не возвращает, то и exec ничего с ней сделать не может. 
- верно ли такое соображение?
- если нам всё-таки нужно поменять рабочий каталог и перемещаться в ОС контейнера, то лучше воспользоваться промелькнувшим на лекции bin/sh? Я понял, что это аналог NortonCommander, просто строковый. Верно?

5) при попытке работать в командной строке с заглавными буквами возникают проблемы: или она не даёт их набрать, или, если они вставляются CTRL+V, то сразу исчезают. Я работаю в терминале в VSC. Какой тут выход - всегда всё делать строчными буквами? 

*) каков необходимый мининмум знания Linux для нас, как для разработчиков Node JS?

*) при установке Docker можно использовать Hyper-V или WSL2 - что это такое, в чём разница и когда это принципиально?